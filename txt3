import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geocoding/geocoding.dart';
import 'package:shared_preferences/shared_preferences.dart';

class AbsensiPage extends StatefulWidget {
  final String nipBaru;

  const AbsensiPage({super.key, required this.nipBaru});

  @override
  State<AbsensiPage> createState() => _AbsensiPageState();
}

class TimeRange {
  final TimeOfDay start;
  final TimeOfDay end;

  const TimeRange({required this.start, required this.end});
}

class _AbsensiPageState extends State<AbsensiPage> {
  File? _selfieImage;
  String _currentLocation = 'Mendapatkan lokasi...';
  bool _isLoadingLocation = false;
  bool _isLoadingAttendance = false;
  DateTime? _lastAttendanceTime;
  Position? _currentPosition;
  String? _attendanceError;
  String? _lastAttendanceType;
  LatLng? _selectedLocation;
  bool _isManualLocation = false;
  String _manualLocationAddress = '';

  final ImagePicker _picker = ImagePicker();
  final String _baseUrl = 'http://192.168.1.100:8000';

  final List<String> _attendanceSequence = ['Pagi', 'Siang', 'Pulang'];
  final Map<String, TimeRange> _attendanceTimes = {
    'Pagi': TimeRange(
      start: const TimeOfDay(hour: 7, minute: 0),
      end: const TimeOfDay(hour: 11, minute: 0),
    ),
    'Siang': TimeRange(
      start: const TimeOfDay(hour: 12, minute: 0),
      end: const TimeOfDay(hour: 14, minute: 0),
    ),
    'Pulang': TimeRange(
      start: const TimeOfDay(hour: 22, minute: 0),
      end: const TimeOfDay(hour: 24, minute: 0),
    ),
  };

  @override
  void initState() {
    super.initState();
    _initializeData();
  }

  Future<void> _initializeData() async {
    await _getCurrentLocation();
    await _fetchLastAttendance();
  }

  // ==================== AUTHENTICATION MANAGEMENT ====================
  Future<String?> _getAuthToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString('auth_token');
    } catch (e) {
      debugPrint('Error getting token: $e');
      return null;
    }
  }

  Future<void> _saveAuthToken(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('auth_token', token);
    } catch (e) {
      debugPrint('Error saving token: $e');
    }
  }

  Future<void> _clearAuthToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('auth_token');
    } catch (e) {
      debugPrint('Error clearing token: $e');
    }
  }

  void _redirectToLogin() {
    if (!mounted) return;
    Navigator.pushNamedAndRemoveUntil(
      context, 
      '/login',
      (route) => false,
    );
  }
  // ==================== END AUTHENTICATION MANAGEMENT ====================

  Future<void> _fetchLastAttendance() async {
    try {
      final token = await _getAuthToken();
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('$_baseUrl/api/last-attendance?nip=${widget.nipBaru}'),
        headers: {
          'Accept': 'application/json',
          'Authorization': 'Bearer $token',
        },
      ).timeout(const Duration(seconds: 10));

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (mounted) {
          setState(() {
            _lastAttendanceType = data['type'];
            _lastAttendanceTime = DateTime.parse(data['time']);
          });
        }
      } else if (response.statusCode == 401) {
        await _clearAuthToken();
        _redirectToLogin();
      }
    } on TimeoutException {
      if (mounted) {
        setState(() => _attendanceError = 'Timeout mengambil data absensi terakhir');
      }
    } catch (e) {
      debugPrint('Error fetching last attendance: $e');
    }
  }

  Future<void> _getCurrentLocation() async {
    if (_isLoadingLocation) return;

    if (mounted) {
      setState(() {
        _isLoadingLocation = true;
        _currentLocation = 'Mendapatkan lokasi...';
        _isManualLocation = false;
        _attendanceError = null;
      });
    }

    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        throw 'Layanan lokasi tidak aktif';
      }

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          throw 'Izin lokasi ditolak';
        }
      }

      if (permission == LocationPermission.deniedForever) {
        throw 'Izin lokasi ditolak permanen';
      }

      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      ).timeout(const Duration(seconds: 10));

      if (mounted) {
        setState(() {
          _currentPosition = position;
          _currentLocation = '${position.latitude.toStringAsFixed(6)}, ${position.longitude.toStringAsFixed(6)}';
        });
      }
    } on TimeoutException {
      if (mounted) {
        setState(() {
          _currentLocation = 'Timeout mendapatkan lokasi';
          _attendanceError = 'Gagal mendapatkan lokasi tepat waktu';
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _currentLocation = 'Gagal: $e';
          _attendanceError = 'Lokasi diperlukan untuk absensi';
        });
      }
    } finally {
      if (mounted) {
        setState(() => _isLoadingLocation = false);
      }
    }
  }

  Future<void> _openMapPicker() async {
    final LatLng? pickedLocation = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => MapPickerScreen(
          initialPosition: _currentPosition != null
              ? LatLng(_currentPosition!.latitude, _currentPosition!.longitude)
              : null,
        ),
      ),
    );

    if (pickedLocation != null && mounted) {
      setState(() {
        _selectedLocation = pickedLocation;
        _isManualLocation = true;
      });
      await _getAddressFromLatLng(pickedLocation);
    }
  }

  Future<void> _getAddressFromLatLng(LatLng position) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(
        position.latitude,
        position.longitude,
      ).timeout(const Duration(seconds: 5));

      if (placemarks.isNotEmpty && mounted) {
        Placemark place = placemarks.first;
        setState(() {
          _manualLocationAddress = '${place.street}, ${place.subLocality}, ${place.locality}';
          _currentLocation = '${position.latitude.toStringAsFixed(6)}, ${position.longitude.toStringAsFixed(6)}';
        });
      }
    } on TimeoutException {
      if (mounted) {
        setState(() => _manualLocationAddress = 'Timeout mendapatkan alamat');
      }
    } catch (e) {
      debugPrint('Error getting address: $e');
      if (mounted) {
        setState(() => _manualLocationAddress = 'Alamat tidak ditemukan');
      }
    }
  }

  // Future<void> _takeSelfie() async {
  //   try {
  //     final XFile? image = await _picker.pickImage(
  //       source: ImageSource.camera,
  //       preferredCameraDevice: CameraDevice.front,
  //       imageQuality: 80,
  //     );

  //     if (image != null && mounted) {
  //       setState(() {
  //         _selfieImage = File(image.path);
  //         _attendanceError = null;
  //       });
  //     }
  //   } catch (e) {
  //     if (mounted) {
  //       ScaffoldMessenger.of(context).showSnackBar(
  //         SnackBar(content: Text('Gagal mengambil foto: $e')),
  //       );
  //     }
  //   }
  // }
  Future<void> _takeSelfie() async {
  try {
    final XFile? image = await _picker.pickImage(
      source: ImageSource.camera,
      preferredCameraDevice: CameraDevice.front,
      imageQuality: 80,
      maxWidth: 1080, // Batasi ukuran gambar
    );

    if (image != null) {
      final file = File(image.path);
      final sizeInMB = await file.length() / (1024 * 1024);
      
      if (sizeInMB > 5) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Ukuran gambar terlalu besar (maks 5MB)')),
          );
        }
        return;
      }

      if (mounted) {
        setState(() {
          _selfieImage = file;
          _attendanceError = null;
        });
      }
    }
  } catch (e) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Gagal mengambil foto: $e')),
      );
    }
  }
}

  String _translateAttendanceType(String type) {
    switch (type) {
      case 'Pagi':
        return 'masuk';
      case 'Siang':
        return 'siang';
      case 'Pulang':
        return 'pulang';
      default:
        return type.toLowerCase();
    }
  }

  bool _isPreviousAttendanceDone(String currentType) {
    if (_lastAttendanceType == null) return true;

    final currentIndex = _attendanceSequence.indexOf(currentType);
    if (currentIndex <= 0) return true;

    final previousType = _attendanceSequence[currentIndex - 1];
    return _lastAttendanceType == previousType || _lastAttendanceType == currentType;
  }

  bool _isWithinTolerance(String type) {
    if (_lastAttendanceTime == null) return true;

    final now = DateTime.now();
    final attendanceTime = _lastAttendanceTime!;
    final difference = now.difference(attendanceTime);

    return difference.inMinutes <= 120; // Toleransi 2 jam
  }

  // String? _parseErrorMessage(String responseBody) {
  //   try {
  //     final json = jsonDecode(responseBody);
  //     return json['message'] ?? json['error'] ?? json['errors']?.toString();
  //   } catch (e) {
  //     return null;
  //   }
  // }
  String? _parseErrorMessage(String responseBody) {
  try {
    final json = jsonDecode(responseBody);
    
    if (json['errors'] != null) {
      // Handle validation errors
      final errors = json['errors'] as Map<String, dynamic>;
      return errors.entries.map((e) => '${e.key}: ${e.value}').join('\n');
    }
    
    return json['message'] ?? json['error'] ?? 'Terjadi kesalahan';
  } catch (e) {
    return 'Gagal memproses respons server';
  }
}

  // Future<void> _submitAttendance(String type) async {
  //   if (_selfieImage == null) {
  //     if (mounted) {
  //       setState(() => _attendanceError = 'Harap ambil foto selfie terlebih dahulu');
  //     }
  //     return;
  //   }

  //   if (mounted) {
  //     setState(() {
  //       _isLoadingAttendance = true;
  //       _attendanceError = null;
  //     });
  //   }

  //   try {
  //     final token = await _getAuthToken();
  //     if (token == null || token.isEmpty) {
  //       _redirectToLogin();
  //       return;
  //     }

  //     var request = http.MultipartRequest(
  //       'POST',
  //       Uri.parse('$_baseUrl/api/absen'),
  //     );

  //     request.headers.addAll({
  //       'Accept': 'application/json',
  //       'Authorization': 'Bearer $token',
  //       'Content-Type': 'multipart/form-data',
  //     });

  //     final position = _isManualLocation && _selectedLocation != null
  //         ? Position(
  //             latitude: _selectedLocation!.latitude,
  //             longitude: _selectedLocation!.longitude,
  //             timestamp: DateTime.now(),
  //             accuracy: 0,
  //             altitude: 0,
  //             heading: 0,
  //             speed: 0,
  //             speedAccuracy: 0,
  //             altitudeAccuracy: 0.0,
  //             headingAccuracy: 0.0,
  //           )
  //         : _currentPosition;

  //     if (position == null) throw 'Lokasi tidak valid';

  //     request.fields.addAll({
  //       'tipe': _translateAttendanceType(type),
  //       'nipBaru': widget.nipBaru,
  //       'lat': position.latitude.toString(),
  //       'long': position.longitude.toString(),
  //       'is_manual_location': _isManualLocation.toString(),
  //     });

  //     request.files.add(await http.MultipartFile.fromPath(
  //       'gambar',
  //       _selfieImage!.path,
  //       contentType: MediaType('image', 'jpeg'),
  //     ));

  //     debugPrint('===== REQUEST =====');
  //     debugPrint('URL: ${request.url}');
  //     debugPrint('Headers: ${request.headers}');
  //     debugPrint('Fields: ${request.fields}');

  //     var response = await request.send().timeout(const Duration(seconds: 15));
  //     final responseBody = await response.stream.bytesToString();

  //     debugPrint('===== RESPONSE =====');
  //     debugPrint('Status: ${response.statusCode}');
  //     debugPrint('Body: $responseBody');

  //     if (response.statusCode == 200) {
  //       final jsonResponse = jsonDecode(responseBody);
  //       if (mounted) {
  //         setState(() {
  //           _lastAttendanceTime = DateTime.now();
  //           _lastAttendanceType = type;
  //         });
  //         ScaffoldMessenger.of(context).showSnackBar(
  //           SnackBar(
  //             content: Text('Absensi $type berhasil dicatat'),
  //             backgroundColor: Colors.green,
  //             duration: const Duration(seconds: 2),
  //           ),
  //         );
  //       }
  //     } else if (response.statusCode == 401) {
  //       await _clearAuthToken();
  //       _redirectToLogin();
  //     } else {
  //       throw _parseErrorMessage(responseBody) ?? 'Gagal melakukan absen (${response.statusCode})';
  //     }
  //   } on TimeoutException {
  //     if (mounted) {
  //       ScaffoldMessenger.of(context).showSnackBar(
  //         SnackBar(
  //           content: const Text('Timeout mengirim data absensi'),
  //           backgroundColor: Colors.red,
  //           duration: const Duration(seconds: 3),
  //         ),
  //       );
  //     }
  //   } catch (e) {
  //     debugPrint('Error submitting attendance: $e');
  //     if (mounted) {
  //       ScaffoldMessenger.of(context).showSnackBar(
  //         SnackBar(
  //           content: Text(e.toString()),
  //           backgroundColor: Colors.red,
  //           duration: const Duration(seconds: 3),
  //         ),
  //       );
  //     }
  //   } finally {
  //     if (mounted) {
  //       setState(() => _isLoadingAttendance = false);
  //     }
  //   }
  // }
  Future<void> _submitAttendance(String type) async {
  // Validasi foto selfie
  if (_selfieImage == null) {
    if (mounted) {
      setState(() => _attendanceError = 'Harap ambil foto selfie terlebih dahulu');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Harap ambil foto selfie terlebih dahulu')),
      );
    }
    return;
  }

  // Validasi lokasi
  if (!_isManualLocation && _currentPosition == null) {
    if (mounted) {
      setState(() => _attendanceError = 'Lokasi diperlukan untuk absensi');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Sedang mendapatkan lokasi...')),
      );
      await _getCurrentLocation(); // Coba dapatkan lokasi lagi
    }
    return;
  }

  if (_isManualLocation && _selectedLocation == null) {
    if (mounted) {
      setState(() => _attendanceError = 'Silakan pilih lokasi manual');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Silakan pilih lokasi manual terlebih dahulu')),
      );
    }
    return;
  }

  if (mounted) {
    setState(() {
      _isLoadingAttendance = true;
      _attendanceError = null;
    });
  }

  try {
    final token = await _getAuthToken();
    if (token == null || token.isEmpty) {
      _redirectToLogin();
      return;
    }

    var request = http.MultipartRequest(
      'POST',
      Uri.parse('$_baseUrl/api/absen'),
    );

    request.headers.addAll({
      'Accept': 'application/json',
      'Authorization': 'Bearer $token',
    });

    final position = _isManualLocation 
        ? _selectedLocation!
        : LatLng(_currentPosition!.latitude, _currentPosition!.longitude);

    // Tambahkan data ke request
    request.fields.addAll({
      'tipe': _translateAttendanceType(type),
      'nip': widget.nipBaru, // Pastikan field name sesuai dengan backend
      'latitude': position.latitude.toString(),
      'longitude': position.longitude.toString(),
      'is_manual_location': _isManualLocation.toString(),
      'waktu': DateTime.now().toIso8601String(), // Tambahkan timestamp
    });

    // Tambahkan file gambar
    request.files.add(await http.MultipartFile.fromPath(
      'foto', // Pastikan field name sesuai dengan backend
      _selfieImage!.path,
      contentType: MediaType('image', 'jpeg'),
    ));

    // Debug log
    debugPrint('Mengirim absensi dengan data:');
    debugPrint('NIP: ${widget.nipBaru}');
    debugPrint('Tipe: $type');
    debugPrint('Lokasi: ${position.latitude}, ${position.longitude}');
    debugPrint('Manual Lokasi: $_isManualLocation');

    var response = await request.send();
    final responseBody = await response.stream.bytesToString();

    if (response.statusCode == 200) {
      final jsonResponse = jsonDecode(responseBody);
      if (mounted) {
        setState(() {
          _lastAttendanceTime = DateTime.now();
          _lastAttendanceType = type;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Absensi $type berhasil dicatat'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } else if (response.statusCode == 401) {
      await _clearAuthToken();
      _redirectToLogin();
    } else {
      final errorMsg = _parseErrorMessage(responseBody) ?? 'Gagal melakukan absen (${response.statusCode})';
      throw errorMsg;
    }
  } catch (e) {
    debugPrint('Error submitting attendance: $e');
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(e.toString()),
          backgroundColor: Colors.red,
        ),
      );
    }
  } finally {
    if (mounted) {
      setState(() => _isLoadingAttendance = false);
    }
  }
}

  // ==================== UI WIDGETS ====================
  Widget _buildLocationSelector() {
    return Column(
      children: [
        ListTile(
          leading: Icon(_isManualLocation ? Icons.edit_location : Icons.location_on),
          title: Text(_isManualLocation ? 'Lokasi Manual' : 'Lokasi Otomatis'),
          subtitle: Text(_isManualLocation
              ? _manualLocationAddress.isNotEmpty
                  ? _manualLocationAddress
                  : 'Mengambil alamat...'
              : 'Menggunakan GPS perangkat'),
          trailing: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (_isManualLocation)
                IconButton(
                  icon: const Icon(Icons.gps_fixed, color: Colors.blue),
                  onPressed: () {
                    if (mounted) {
                      setState(() => _isManualLocation = false);
                    }
                    _getCurrentLocation();
                  },
                ),
              IconButton(
                icon: const Icon(Icons.map, color: Colors.blue),
                onPressed: _openMapPicker,
              ),
            ],
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            children: [
              const Icon(Icons.location_pin, size: 16, color: Colors.grey),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _currentLocation,
                  style: const TextStyle(fontSize: 12),
                ),
              ),
              if (_isLoadingLocation)
                const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
            ],
          ),
        ),
      ],
    );
  }

  IconData _getAttendanceIcon(String type) {
    switch (type) {
      case 'Pagi':
        return Icons.wb_sunny;
      case 'Siang':
        return Icons.lunch_dining;
      case 'Pulang':
        return Icons.nightlight_round;
      default:
        return Icons.access_time;
    }
  }

  bool _isTimeInRange(TimeOfDay currentTime, TimeOfDay startTime, TimeOfDay endTime) {
    final nowInMinutes = currentTime.hour * 60 + currentTime.minute;
    final startInMinutes = startTime.hour * 60 + startTime.minute;
    final endInMinutes = endTime.hour * 60 + endTime.minute;

    return nowInMinutes >= startInMinutes && nowInMinutes <= endInMinutes;
  }

  Widget _buildAttendanceButton(String type) {
    final timeRange = _attendanceTimes[type]!;
    final now = TimeOfDay.now();
    final isAvailable = _isTimeInRange(now, timeRange.start, timeRange.end);
    final isPreviousDone = _isPreviousAttendanceDone(type);
    final isWithinTolerance = _isWithinTolerance(type);

    final isEnabled = isAvailable &&
        _selfieImage != null &&
        !_isLoadingAttendance &&
        !_isLoadingLocation &&
        isPreviousDone &&
        isWithinTolerance &&
        (_currentPosition != null || _isManualLocation);

    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8.0),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: isEnabled ? Colors.blue : Colors.grey,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          onPressed: isEnabled ? () => _submitAttendance(type) : null,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                _getAttendanceIcon(type),
                size: 30,
                color: Colors.white,
              ),
              const SizedBox(height: 8),
              Text(
                'Absen $type',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              Text(
                '${timeRange.start.hour}:${timeRange.start.minute.toString().padLeft(2, '0')} - '
                '${timeRange.end.hour}:${timeRange.end.minute.toString().padLeft(2, '0')}',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                ),
                textAlign: TextAlign.center,
              ),
              if (_lastAttendanceType == type)
                const Padding(
                  padding: EdgeInsets.only(top: 4),
                  child: Icon(Icons.check_circle, size: 16, color: Colors.white),
                ),
              if (!isPreviousDone)
                const Padding(
                  padding: EdgeInsets.only(top: 4),
                  child: Text(
                    'Lakukan absen sebelumnya',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                    ),
                  ),
                ),
              if (!isWithinTolerance && _lastAttendanceType != null)
                const Padding(
                  padding: EdgeInsets.only(top: 4),
                  child: Text(
                    'Melebihi toleransi',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Absensi', style: TextStyle(color: Colors.white)),
        backgroundColor: const Color(0xFFFEBA17),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Card(
              child: ListTile(
                leading: const Icon(Icons.badge, color: Colors.blue),
                title: const Text('NIP'),
                subtitle: Text(widget.nipBaru),
              ),
            ),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    const Text(
                      'Foto Selfie',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    GestureDetector(
                      onTap: _takeSelfie,
                      child: Container(
                        width: 150,
                        height: 150,
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.grey),
                        ),
                        child: _selfieImage != null
                            ? ClipRRect(
                                borderRadius: BorderRadius.circular(12),
                                child: Image.file(_selfieImage!, fit: BoxFit.cover),
                              )
                            : const Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.camera_alt, size: 50, color: Colors.grey),
                                  Text('Ambil Foto'),
                                ],
                              ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Lokasi Saat Ini',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    _buildLocationSelector(),
                    if (_attendanceError != null && _attendanceError!.contains('Lokasi'))
                      Padding(
                        padding: const EdgeInsets.only(top: 8),
                        child: Text(
                          _attendanceError!,
                          style: const TextStyle(color: Colors.red, fontSize: 12),
                        ),
                      ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    const Text(
                      'Absensi Hari Ini',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    if (_attendanceError != null && !_attendanceError!.contains('Lokasi'))
                      Padding(
                        padding: const EdgeInsets.only(bottom: 16),
                        child: Text(
                          _attendanceError!,
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    Row(
                      children: [
                        _buildAttendanceButton('Pagi'),
                        _buildAttendanceButton('Siang'),
                        _buildAttendanceButton('Pulang'),
                      ],
                    ),
                    if (_isLoadingAttendance)
                      const Padding(
                        padding: EdgeInsets.only(top: 16),
                        child: CircularProgressIndicator(),
                      ),
                  ],
                ),
              ),
            ),
            if (_lastAttendanceTime != null)
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    children: [
                      const Text(
                        'Absensi Terakhir',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        DateFormat('EEEE, dd MMMM yyyy HH:mm', 'id_ID')
                            .format(_lastAttendanceTime!),
                      ),
                      Text(
                        'Tipe: ${_lastAttendanceType ?? '-'}',
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}

class MapPickerScreen extends StatefulWidget {
  final LatLng? initialPosition;

  const MapPickerScreen({Key? key, this.initialPosition}) : super(key: key);

  @override
  _MapPickerScreenState createState() => _MapPickerScreenState();
}

class _MapPickerScreenState extends State<MapPickerScreen> {
  late GoogleMapController _mapController;
  LatLng? _selectedLocation;
  Marker? _marker;

  @override
  void initState() {
    super.initState();
    _selectedLocation = widget.initialPosition;
    if (_selectedLocation != null) {
      _marker = Marker(
        markerId: const MarkerId('selected-location'),
        position: _selectedLocation!,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Pilih Lokasi'),
        actions: [
          IconButton(
            icon: const Icon(Icons.check),
            onPressed: () {
              if (_selectedLocation != null) {
                Navigator.pop(context, _selectedLocation);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Silakan pilih lokasi terlebih dahulu')),
                );
              }
            },
          ),
        ],
      ),
      body: GoogleMap(
        initialCameraPosition: CameraPosition(
          target: widget.initialPosition ?? const LatLng(-6.2088, 106.8456),
          zoom: 14,
        ),
        onMapCreated: (controller) => _mapController = controller,
        onTap: (latLng) {
          setState(() {
            _selectedLocation = latLng;
            _marker = Marker(
              markerId: const MarkerId('selected-location'),
              position: latLng,
            );
          });
        },
        markers: _marker != null ? {_marker!} : {},
        myLocationEnabled: true,
        myLocationButtonEnabled: true,
      ),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.gps_fixed),
        onPressed: () {
          if (_selectedLocation != null) {
            _mapController.animateCamera(
              CameraUpdate.newLatLng(_selectedLocation!),
            );
          }
        },
      ),
    );
  }
}