// import 'dart:convert';
// import 'package:flutter/material.dart';
// import 'package:geolocator/geolocator.dart';
// import 'package:image_picker/image_picker.dart';
// import 'dart:io';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'package:http_parser/http_parser.dart';

// class AbsensiPage extends StatefulWidget {
//   final String nipBaru;

//   const AbsensiPage({super.key, required this.nipBaru});

//   @override
//   State<AbsensiPage> createState() => _AbsensiPageState();
// }

// class TimeRange {
//   final TimeOfDay start;
//   final TimeOfDay end;

//   const TimeRange({required this.start, required this.end});
// }

// class _AbsensiPageState extends State<AbsensiPage> {
//   File? _selfieImage;
//   String _currentLocation = 'Mendapatkan lokasi...';
//   bool _isLoadingLocation = false;
//   bool _isLoadingAttendance = false;
//   DateTime? _lastAttendanceTime;
//   Position? _currentPosition;
//   String? _attendanceError;
//   String? _lastAttendanceType;

//   final ImagePicker _picker = ImagePicker();
//   final String _baseUrl = 'http://127.0.0.1:8000';

//   final List<String> _attendanceSequence = ['Pagi', 'Siang', 'Pulang'];
//   final Map<String, TimeRange> _attendanceTimes = {
//     'Pagi': TimeRange(
//       start: const TimeOfDay(hour: 7, minute: 0),
//       end: const TimeOfDay(hour: 10, minute: 0),
//     ),
//     'Siang': TimeRange(
//       start: const TimeOfDay(hour: 12, minute: 0),
//       end: const TimeOfDay(hour: 14, minute: 0),
//     ),
//     'Pulang': TimeRange(
//       start: const TimeOfDay(hour: 16, minute: 0),
//       end: const TimeOfDay(hour: 17, minute: 0),
//     ),
//   };

//   @override
//   void initState() {
//     super.initState();
//     _getCurrentLocation();
//     _fetchLastAttendance();
//   }

//   Future<void> _fetchLastAttendance() async {
//     try {
//       // Implementasi untuk mengambil data absensi terakhir dari server
//       // Contoh:
//       final response = await http.get(
//           Uri.parse('$_baseUrl/api/last-attendance?nip=${widget.nipBaru}'));
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         setState(() {
//           _lastAttendanceType = data['type'];
//           _lastAttendanceTime = DateTime.parse(data['time']);
//         });
//       }
//     } catch (e) {
//       print('Gagal mengambil data absensi terakhir: $e');
//     }
//   }

//   Future<void> _getCurrentLocation() async {
//     if (_isLoadingLocation) return;

//     setState(() {
//       _isLoadingLocation = true;
//       _currentLocation = 'Mendapatkan lokasi...';
//     });

//     try {
//       bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
//       if (!serviceEnabled) {
//         throw 'Layanan lokasi tidak aktif';
//       }

//       LocationPermission permission = await Geolocator.checkPermission();
//       if (permission == LocationPermission.denied) {
//         permission = await Geolocator.requestPermission();
//         if (permission == LocationPermission.denied) {
//           throw 'Izin lokasi ditolak';
//         }
//       }

//       if (permission == LocationPermission.deniedForever) {
//         throw 'Izin lokasi ditolak permanen';
//       }

//       Position position = await Geolocator.getCurrentPosition(
//         desiredAccuracy: LocationAccuracy.high,
//       );

//       setState(() {
//         _currentPosition = position;
//         _currentLocation =
//             '${position.latitude.toStringAsFixed(6)}, ${position.longitude.toStringAsFixed(6)}';
//         _attendanceError = null;
//       });
//     } catch (e) {
//       setState(() {
//         _currentLocation = 'Gagal: $e';
//         _attendanceError = 'Lokasi diperlukan untuk absensi';
//       });
//     } finally {
//       setState(() => _isLoadingLocation = false);
//     }
//   }

//   Future<void> _takeSelfie() async {
//     try {
//       final XFile? image = await _picker.pickImage(
//         source: ImageSource.camera,
//         preferredCameraDevice: CameraDevice.front,
//         imageQuality: 80,
//       );

//       if (image != null) {
//         setState(() {
//           _selfieImage = File(image.path);
//           _attendanceError = null;
//         });
//       }
//     } catch (e) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Gagal mengambil foto: $e')),
//       );
//     }
//   }

//   String _translateAttendanceType(String type) {
//     switch (type) {
//       case 'Pagi':
//         return 'masuk';
//       case 'Siang':
//         return 'siang';
//       case 'Pulang':
//         return 'pulang';
//       default:
//         return type.toLowerCase();
//     }
//   }

//   bool _isPreviousAttendanceDone(String currentType) {
//     if (_lastAttendanceType == null) return true;

//     final currentIndex = _attendanceSequence.indexOf(currentType);
//     if (currentIndex <= 0) return true;

//     final previousType = _attendanceSequence[currentIndex - 1];
//     return _lastAttendanceType == previousType ||
//         _lastAttendanceType == currentType;
//   }

//   bool _isWithinTolerance(String type) {
//     if (_lastAttendanceTime == null) return true;

//     final now = DateTime.now();
//     final attendanceTime = _lastAttendanceTime!;
//     final difference = now.difference(attendanceTime);

//     return difference.inMinutes <= 120; // Toleransi 2 jam
//   }

//   Future<void> _submitAttendance(String type) async {
//     if (_selfieImage == null) {
//       setState(
//           () => _attendanceError = 'Harap ambil foto selfie terlebih dahulu');
//       return;
//     }

//     if (_isLoadingLocation || _currentPosition == null) {
//       setState(() => _attendanceError = 'Sedang mendapatkan lokasi...');
//       await _getCurrentLocation();
//       if (_currentPosition == null) return;
//     }

//     if (!_isPreviousAttendanceDone(type)) {
//       setState(() => _attendanceError =
//           'Harap lakukan absen ${_attendanceSequence[_attendanceSequence.indexOf(type) - 1]} terlebih dahulu');
//       return;
//     }

//     if (!_isWithinTolerance(type) && _lastAttendanceType != null) {
//       setState(() => _attendanceError = 'Melebihi batas toleransi 2 jam');
//       return;
//     }

//     setState(() {
//       _isLoadingAttendance = true;
//       _attendanceError = null;
//     });

//     try {
//       var request = http.MultipartRequest(
//         'POST',
//         Uri.parse('$_baseUrl/api/absen'),
//       );

//       request.fields.addAll({
//         'tipe': _translateAttendanceType(type),
//         'nipBaru': widget.nipBaru,
//         'lat': _currentPosition!.latitude.toString(),
//         'long': _currentPosition!.longitude.toString(),
//       });

//       request.files.add(await http.MultipartFile.fromPath(
//         'gambar',
//         _selfieImage!.path,
//         contentType: MediaType('image', 'jpeg'),
//       ));

//       var response = await request.send();
//       final responseBody = await response.stream.bytesToString();

//       if (response.statusCode == 200) {
//         setState(() {
//           _lastAttendanceTime = DateTime.now();
//           _lastAttendanceType = type;
//         });

//         ScaffoldMessenger.of(context).showSnackBar(
//           SnackBar(
//             content: Text('Absensi $type berhasil dicatat'),
//             backgroundColor: Colors.green,
//           ),
//         );
//       } else {
//         throw '${response.statusCode}: $responseBody';
//       }
//     } catch (e) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(
//           content: Text('Gagal absen: $e'),
//           backgroundColor: Colors.red,
//         ),
//       );
//     } finally {
//       setState(() => _isLoadingAttendance = false);
//     }
//   }

//   IconData _getAttendanceIcon(String type) {
//     switch (type) {
//       case 'Pagi':
//         return Icons.wb_sunny;
//       case 'Siang':
//         return Icons.lunch_dining;
//       case 'Pulang':
//         return Icons.nightlight_round;
//       default:
//         return Icons.access_time;
//     }
//   }

//   Widget _buildAttendanceButton(String type) {
//     final timeRange = _attendanceTimes[type]!;
//     final now = TimeOfDay.now();

//     // Cek apakah waktu sekarang berada dalam rentang waktu absen
//     final isAvailable = _isTimeInRange(now, timeRange.start, timeRange.end);

//     final isPreviousDone = _isPreviousAttendanceDone(type);
//     final isWithinTolerance = _isWithinTolerance(type);

//     final isEnabled = isAvailable &&
//         _selfieImage != null &&
//         !_isLoadingAttendance &&
//         !_isLoadingLocation &&
//         isPreviousDone &&
//         isWithinTolerance;

//     return Expanded(
//       child: Padding(
//         padding: const EdgeInsets.symmetric(horizontal: 8.0),
//         child: ElevatedButton(
//           style: ElevatedButton.styleFrom(
//             backgroundColor: isEnabled ? Colors.blue : Colors.grey,
//             padding: const EdgeInsets.symmetric(vertical: 16),
//             shape: RoundedRectangleBorder(
//               borderRadius: BorderRadius.circular(12),
//             ),
//           ),
//           onPressed: isEnabled ? () => _submitAttendance(type) : null,
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               Icon(
//                 _getAttendanceIcon(type),
//                 size: 30,
//                 color: Colors.white,
//               ),
//               const SizedBox(height: 8),
//               Text(
//                 'Absen $type',
//                 style: const TextStyle(
//                   color: Colors.white,
//                   fontSize: 16,
//                   fontWeight: FontWeight.bold,
//                 ),
//                 textAlign: TextAlign.center,
//               ),
//               Text(
//                 '${timeRange.start.hour}:${timeRange.start.minute.toString().padLeft(2, '0')} - '
//                 '${timeRange.end.hour}:${timeRange.end.minute.toString().padLeft(2, '0')}',
//                 style: const TextStyle(
//                   color: Colors.white,
//                   fontSize: 14,
//                 ),
//                 textAlign: TextAlign.center,
//               ),
//               if (_lastAttendanceType == type)
//                 const Padding(
//                   padding: EdgeInsets.only(top: 4),
//                   child:
//                       Icon(Icons.check_circle, size: 16, color: Colors.white),
//                 ),
//               if (!isPreviousDone)
//                 const Padding(
//                   padding: EdgeInsets.only(top: 4),
//                   child: Text(
//                     'Lakukan absen sebelumnya',
//                     style: TextStyle(
//                       color: Colors.white,
//                       fontSize: 10,
//                     ),
//                   ),
//                 ),
//               if (!isWithinTolerance && _lastAttendanceType != null)
//                 const Padding(
//                   padding: EdgeInsets.only(top: 4),
//                   child: Text(
//                     'Melebihi toleransi',
//                     style: TextStyle(
//                       color: Colors.white,
//                       fontSize: 10,
//                     ),
//                   ),
//                 ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }

// // Tambahkan fungsi helper untuk mengecek rentang waktu
//   bool _isTimeInRange(
//       TimeOfDay currentTime, TimeOfDay startTime, TimeOfDay endTime) {
//     final nowInMinutes = currentTime.hour * 60 + currentTime.minute;
//     final startInMinutes = startTime.hour * 60 + startTime.minute;
//     final endInMinutes = endTime.hour * 60 + endTime.minute;

//     return nowInMinutes >= startInMinutes && nowInMinutes <= endInMinutes;
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Absensi'),
//         leading: IconButton(
//           icon: const Icon(Icons.arrow_back),
//           onPressed: () => Navigator.pop(context),
//         ),
//       ),
//       body: SingleChildScrollView(
//         padding: const EdgeInsets.all(16),
//         child: Column(
//           children: [
//             Card(
//               child: ListTile(
//                 leading: const Icon(Icons.badge, color: Colors.blue),
//                 title: const Text('NIP'),
//                 subtitle: Text(widget.nipBaru),
//               ),
//             ),
//             const SizedBox(height: 16),
//             Card(
//               child: Padding(
//                 padding: const EdgeInsets.all(16),
//                 child: Column(
//                   children: [
//                     const Text(
//                       'Foto Selfie',
//                       style: TextStyle(
//                         fontSize: 18,
//                         fontWeight: FontWeight.bold,
//                       ),
//                     ),
//                     const SizedBox(height: 16),
//                     GestureDetector(
//                       onTap: _takeSelfie,
//                       child: Container(
//                         width: 150,
//                         height: 150,
//                         decoration: BoxDecoration(
//                           color: Colors.grey[200],
//                           borderRadius: BorderRadius.circular(12),
//                           border: Border.all(color: Colors.grey),
//                         ),
//                         child: _selfieImage != null
//                             ? ClipRRect(
//                                 borderRadius: BorderRadius.circular(12),
//                                 child: Image.file(_selfieImage!,
//                                     fit: BoxFit.cover),
//                               )
//                             : const Column(
//                                 mainAxisAlignment: MainAxisAlignment.center,
//                                 children: [
//                                   Icon(Icons.camera_alt,
//                                       size: 50, color: Colors.grey),
//                                   Text('Ambil Foto'),
//                                 ],
//                               ),
//                       ),
//                     ),
//                   ],
//                 ),
//               ),
//             ),
//             const SizedBox(height: 16),
//             Card(
//               child: Padding(
//                 padding: const EdgeInsets.all(16),
//                 child: Column(
//                   crossAxisAlignment: CrossAxisAlignment.start,
//                   children: [
//                     const Text(
//                       'Lokasi Saat Ini',
//                       style: TextStyle(
//                         fontSize: 18,
//                         fontWeight: FontWeight.bold,
//                       ),
//                     ),
//                     const SizedBox(height: 8),
//                     Row(
//                       children: [
//                         const Icon(Icons.location_on, color: Colors.red),
//                         const SizedBox(width: 8),
//                         Expanded(child: Text(_currentLocation)),
//                         if (_isLoadingLocation)
//                           const SizedBox(
//                             width: 24,
//                             height: 24,
//                             child: CircularProgressIndicator(strokeWidth: 2),
//                           )
//                         else
//                           IconButton(
//                             icon: const Icon(Icons.refresh),
//                             onPressed: _getCurrentLocation,
//                           ),
//                       ],
//                     ),
//                   ],
//                 ),
//               ),
//             ),
//             const SizedBox(height: 16),
//             Card(
//               child: Padding(
//                 padding: const EdgeInsets.all(16),
//                 child: Column(
//                   children: [
//                     const Text(
//                       'Absensi Hari Ini',
//                       style: TextStyle(
//                         fontSize: 18,
//                         fontWeight: FontWeight.bold,
//                       ),
//                     ),
//                     const SizedBox(height: 16),
//                     if (_attendanceError != null)
//                       Padding(
//                         padding: const EdgeInsets.only(bottom: 16),
//                         child: Text(
//                           _attendanceError!,
//                           style: const TextStyle(color: Colors.red),
//                         ),
//                       ),
//                     Row(
//                       children: [
//                         _buildAttendanceButton('Pagi'),
//                         _buildAttendanceButton('Siang'),
//                         _buildAttendanceButton('Pulang'),
//                       ],
//                     ),
//                     if (_isLoadingAttendance)
//                       const Padding(
//                         padding: EdgeInsets.only(top: 16),
//                         child: CircularProgressIndicator(),
//                       ),
//                   ],
//                 ),
//               ),
//             ),
//             if (_lastAttendanceTime != null)
//               Card(
//                 child: Padding(
//                   padding: const EdgeInsets.all(16),
//                   child: Column(
//                     children: [
//                       const Text(
//                         'Absensi Terakhir',
//                         style: TextStyle(
//                           fontSize: 18,
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                       const SizedBox(height: 8),
//                       Text(
//                         DateFormat('EEEE, dd MMMM yyyy HH:mm', 'id_ID')
//                             .format(_lastAttendanceTime!),
//                       ),
//                       Text(
//                         'Tipe: ${_lastAttendanceType ?? '-'}',
//                         style: const TextStyle(fontWeight: FontWeight.bold),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//           ],
//         ),
//       ),
//     );
//   }
// }

import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geocoding/geocoding.dart';
import 'package:shared_preferences/shared_preferences.dart';

class AbsensiPage extends StatefulWidget {
  final String nipBaru;

  const AbsensiPage({super.key, required this.nipBaru});

  @override
  State<AbsensiPage> createState() => _AbsensiPageState();
}

class TimeRange {
  final TimeOfDay start;
  final TimeOfDay end;

  const TimeRange({required this.start, required this.end});
}

class _AbsensiPageState extends State<AbsensiPage> {
  File? _selfieImage;
  String _currentLocation = 'Mendapatkan lokasi...';
  bool _isLoadingLocation = false;
  bool _isLoadingAttendance = false;
  DateTime? _lastAttendanceTime;
  Position? _currentPosition;
  String? _attendanceError;
  String? _lastAttendanceType;
  LatLng? _selectedLocation;
  bool _isManualLocation = false;
  String _manualLocationAddress = '';

  final ImagePicker _picker = ImagePicker();
  // final String _baseUrl = 'http://127.0.0.1:8000';
  final String _baseUrl = 'http://192.168.1.100:8000';

  final List<String> _attendanceSequence = ['Pagi', 'Siang', 'Pulang'];
  final Map<String, TimeRange> _attendanceTimes = {
    'Pagi': TimeRange(
      start: const TimeOfDay(hour: 7, minute: 0),
      end: const TimeOfDay(hour: 11, minute: 0),
    ),
    'Siang': TimeRange(
      start: const TimeOfDay(hour: 12, minute: 0),
      end: const TimeOfDay(hour: 14, minute: 0),
    ),
    'Pulang': TimeRange(
      start: const TimeOfDay(hour: 16, minute: 0),
      end: const TimeOfDay(hour: 17, minute: 0),
    ),
  };

  @override
  void initState() {
    super.initState();
    _getCurrentLocation();
    _fetchLastAttendance();
  }

  Future<void> _fetchLastAttendance() async {
    try {
      final response = await http.get(
        Uri.parse('$_baseUrl/api/last-attendance?nip=${widget.nipBaru}'),
        headers: {'Accept': 'application/json'}, // Tambahkan header
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          _lastAttendanceType = data['type'];
          _lastAttendanceTime = DateTime.parse(data['time']);
        });
      } else if (response.statusCode == 302) {
        print('Redirect detected: ${response.headers['location']}');
      }
    } catch (e) {
      print('Error: $e');
    }
  }

  Future<void> _getCurrentLocation() async {
    if (_isLoadingLocation) return;

    setState(() {
      _isLoadingLocation = true;
      _currentLocation = 'Mendapatkan lokasi...';
      _isManualLocation = false;
    });

    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        throw 'Layanan lokasi tidak aktif';
      }

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          throw 'Izin lokasi ditolak';
        }
      }

      if (permission == LocationPermission.deniedForever) {
        throw 'Izin lokasi ditolak permanen';
      }

      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      setState(() {
        _currentPosition = position;
        _currentLocation =
            '${position.latitude.toStringAsFixed(6)}, ${position.longitude.toStringAsFixed(6)}';
        _attendanceError = null;
      });
    } catch (e) {
      setState(() {
        _currentLocation = 'Gagal: $e';
        _attendanceError = 'Lokasi diperlukan untuk absensi';
      });
    } finally {
      setState(() => _isLoadingLocation = false);
    }
  }

  Future<void> _openMapPicker() async {
    final LatLng? pickedLocation = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => MapPickerScreen(
          initialPosition: _currentPosition != null
              ? LatLng(_currentPosition!.latitude, _currentPosition!.longitude)
              : null,
        ),
      ),
    );

    if (pickedLocation != null) {
      setState(() {
        _selectedLocation = pickedLocation;
        _isManualLocation = true;
      });
      await _getAddressFromLatLng(pickedLocation);
    }
  }

  Future<void> _getAddressFromLatLng(LatLng position) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(
        position.latitude,
        position.longitude,
      );

      if (placemarks.isNotEmpty) {
        Placemark place = placemarks.first;
        setState(() {
          _manualLocationAddress =
              '${place.street}, ${place.subLocality}, ${place.locality}';
          _currentLocation =
              '${position.latitude.toStringAsFixed(6)}, ${position.longitude.toStringAsFixed(6)}';
          _attendanceError = null;
        });
      }
    } catch (e) {
      print('Error getting address: $e');
      setState(() {
        _manualLocationAddress = 'Alamat tidak ditemukan';
      });
    }
  }

  Future<void> _takeSelfie() async {
    try {
      final XFile? image = await _picker.pickImage(
        source: ImageSource.camera,
        preferredCameraDevice: CameraDevice.front,
        imageQuality: 80,
      );

      if (image != null) {
        setState(() {
          _selfieImage = File(image.path);
          _attendanceError = null;
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Gagal mengambil foto: $e')),
      );
    }
  }

  String _translateAttendanceType(String type) {
    switch (type) {
      case 'Pagi':
        return 'masuk';
      case 'Siang':
        return 'siang';
      case 'Pulang':
        return 'pulang';
      default:
        return type.toLowerCase();
    }
  }

  bool _isPreviousAttendanceDone(String currentType) {
    if (_lastAttendanceType == null) return true;

    final currentIndex = _attendanceSequence.indexOf(currentType);
    if (currentIndex <= 0) return true;

    final previousType = _attendanceSequence[currentIndex - 1];
    return _lastAttendanceType == previousType ||
        _lastAttendanceType == currentType;
  }

  bool _isWithinTolerance(String type) {
    if (_lastAttendanceTime == null) return true;

    final now = DateTime.now();
    final attendanceTime = _lastAttendanceTime!;
    final difference = now.difference(attendanceTime);

    return difference.inMinutes <= 120; // Toleransi 2 jam
  }

  Future<void> _submitAttendance(String type) async {
    if (_selfieImage == null) {
      setState(
          () => _attendanceError = 'Harap ambil foto selfie terlebih dahulu');
      return;
    }

    setState(() {
      _isLoadingAttendance = true;
      _attendanceError = null;
    });

    try {
      // 1. Get the authentication token
      final token = await _getAuthToken();
      if (token == null) {
        throw 'Sesi telah berakhir, silakan login kembali';
      }

      // 2. Prepare the request
      var request = http.MultipartRequest(
        'POST',
        Uri.parse('$_baseUrl/api/absen'),
      );

      // 3. Add headers with authentication
      request.headers.addAll({
        'Accept': 'application/json',
        'Authorization': 'Bearer $token',
        'Content-Type': 'multipart/form-data',
      });

      // 4. Handle location data
      final position = _isManualLocation && _selectedLocation != null
          ? Position(
              latitude: _selectedLocation!.latitude,
              longitude: _selectedLocation!.longitude,
              timestamp: DateTime.now(),
              accuracy: 0,
              altitude: 0,
              heading: 0,
              speed: 0,
              speedAccuracy: 0,
              altitudeAccuracy: 0.0,
              headingAccuracy: 0.0,
            )
          : _currentPosition;

      if (position == null) throw 'Lokasi tidak valid';

      // 5. Add form fields
      request.fields.addAll({
        'tipe': _translateAttendanceType(type),
        'nipBaru': widget.nipBaru,
        'lat': position.latitude.toString(),
        'long': position.longitude.toString(),
        'is_manual_location': _isManualLocation.toString(),
      });

      // 6. Add image file
      request.files.add(await http.MultipartFile.fromPath(
        'gambar',
        _selfieImage!.path,
        contentType: MediaType('image', 'jpeg'),
      ));

      // 7. Debugging logs
      debugPrint('===== REQUEST =====');
      debugPrint('URL: ${request.url}');
      debugPrint('Headers: ${request.headers}');
      debugPrint('Fields: ${request.fields}');

      // 8. Send the request
      var response = await request.send();
      final responseBody = await response.stream.bytesToString();

      debugPrint('===== RESPONSE =====');
      debugPrint('Status: ${response.statusCode}');
      debugPrint('Body: $responseBody');

      // 9. Handle response
      if (response.statusCode == 200) {
        final jsonResponse = jsonDecode(responseBody);
        setState(() {
          _lastAttendanceTime = DateTime.now();
          _lastAttendanceType = type;
        });

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Absensi $type berhasil dicatat'),
            backgroundColor: Colors.green,
          ),
        );
      } else if (response.statusCode == 401) {
        await _clearAuthToken(); // Clear invalid token
        throw 'Sesi telah berakhir, silakan login kembali';
      } else if (response.statusCode == 302) {
        throw 'Konfigurasi server tidak valid';
      } else {
        throw _parseErrorMessage(responseBody) ??
            'Gagal melakukan absen (${response.statusCode})';
      }
    } catch (e) {
      debugPrint('Error: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(e.toString()),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );
    } finally {
      setState(() => _isLoadingAttendance = false);
    }
  }

// Helper function to get auth token
  Future<String?> _getAuthToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

// Helper function to clear auth token
  Future<void> _clearAuthToken() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('auth_token');
  }

// Helper function to parse error message
  String? _parseErrorMessage(String responseBody) {
    try {
      final json = jsonDecode(responseBody);
      return json['message'] ?? json['error'];
    } catch (e) {
      return null;
    }
  }

  Widget _buildLocationSelector() {
    return Column(
      children: [
        ListTile(
          leading:
              Icon(_isManualLocation ? Icons.edit_location : Icons.location_on),
          title: Text(_isManualLocation ? 'Lokasi Manual' : 'Lokasi Otomatis'),
          subtitle: Text(_isManualLocation
              ? _manualLocationAddress.isNotEmpty
                  ? _manualLocationAddress
                  : 'Mengambil alamat...'
              : 'Menggunakan GPS perangkat'),
          trailing: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (_isManualLocation)
                IconButton(
                  icon: const Icon(Icons.gps_fixed, color: Colors.blue),
                  onPressed: () {
                    setState(() => _isManualLocation = false);
                    _getCurrentLocation();
                  },
                ),
              IconButton(
                icon: const Icon(Icons.map, color: Colors.blue),
                onPressed: _openMapPicker,
              ),
            ],
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            children: [
              const Icon(Icons.location_pin, size: 16, color: Colors.grey),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _currentLocation,
                  style: const TextStyle(fontSize: 12),
                ),
              ),
              if (_isLoadingLocation)
                const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
            ],
          ),
        ),
      ],
    );
  }

  IconData _getAttendanceIcon(String type) {
    switch (type) {
      case 'Pagi':
        return Icons.wb_sunny;
      case 'Siang':
        return Icons.lunch_dining;
      case 'Pulang':
        return Icons.nightlight_round;
      default:
        return Icons.access_time;
    }
  }

  bool _isTimeInRange(
      TimeOfDay currentTime, TimeOfDay startTime, TimeOfDay endTime) {
    final nowInMinutes = currentTime.hour * 60 + currentTime.minute;
    final startInMinutes = startTime.hour * 60 + startTime.minute;
    final endInMinutes = endTime.hour * 60 + endTime.minute;

    return nowInMinutes >= startInMinutes && nowInMinutes <= endInMinutes;
  }

  Widget _buildAttendanceButton(String type) {
    final timeRange = _attendanceTimes[type]!;
    final now = TimeOfDay.now();
    final isAvailable = _isTimeInRange(now, timeRange.start, timeRange.end);
    final isPreviousDone = _isPreviousAttendanceDone(type);
    final isWithinTolerance = _isWithinTolerance(type);

    final isEnabled = isAvailable &&
        _selfieImage != null &&
        !_isLoadingAttendance &&
        !_isLoadingLocation &&
        isPreviousDone &&
        isWithinTolerance &&
        (_currentPosition != null || _isManualLocation);

    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8.0),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: isEnabled ? Colors.blue : Colors.grey,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          onPressed: isEnabled ? () => _submitAttendance(type) : null,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                _getAttendanceIcon(type),
                size: 30,
                color: Colors.white,
              ),
              const SizedBox(height: 8),
              Text(
                'Absen $type',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              Text(
                '${timeRange.start.hour}:${timeRange.start.minute.toString().padLeft(2, '0')} - '
                '${timeRange.end.hour}:${timeRange.end.minute.toString().padLeft(2, '0')}',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                ),
                textAlign: TextAlign.center,
              ),
              if (_lastAttendanceType == type)
                const Padding(
                  padding: EdgeInsets.only(top: 4),
                  child:
                      Icon(Icons.check_circle, size: 16, color: Colors.white),
                ),
              if (!isPreviousDone)
                const Padding(
                  padding: EdgeInsets.only(top: 4),
                  child: Text(
                    'Lakukan absen sebelumnya',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                    ),
                  ),
                ),
              if (!isWithinTolerance && _lastAttendanceType != null)
                const Padding(
                  padding: EdgeInsets.only(top: 4),
                  child: Text(
                    'Melebihi toleransi',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Absensi'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Card(
              child: ListTile(
                leading: const Icon(Icons.badge, color: Colors.blue),
                title: const Text('NIP'),
                subtitle: Text(widget.nipBaru),
              ),
            ),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    const Text(
                      'Foto Selfie',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    GestureDetector(
                      onTap: _takeSelfie,
                      child: Container(
                        width: 150,
                        height: 150,
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.grey),
                        ),
                        child: _selfieImage != null
                            ? ClipRRect(
                                borderRadius: BorderRadius.circular(12),
                                child: Image.file(_selfieImage!,
                                    fit: BoxFit.cover),
                              )
                            : const Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.camera_alt,
                                      size: 50, color: Colors.grey),
                                  Text('Ambil Foto'),
                                ],
                              ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Lokasi Saat Ini',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    _buildLocationSelector(),
                    if (_attendanceError != null &&
                        _attendanceError!.contains('Lokasi'))
                      Padding(
                        padding: const EdgeInsets.only(top: 8),
                        child: Text(
                          _attendanceError!,
                          style:
                              const TextStyle(color: Colors.red, fontSize: 12),
                        ),
                      ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    const Text(
                      'Absensi Hari Ini',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    if (_attendanceError != null &&
                        !_attendanceError!.contains('Lokasi'))
                      Padding(
                        padding: const EdgeInsets.only(bottom: 16),
                        child: Text(
                          _attendanceError!,
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    Row(
                      children: [
                        _buildAttendanceButton('Pagi'),
                        _buildAttendanceButton('Siang'),
                        _buildAttendanceButton('Pulang'),
                      ],
                    ),
                    if (_isLoadingAttendance)
                      const Padding(
                        padding: EdgeInsets.only(top: 16),
                        child: CircularProgressIndicator(),
                      ),
                  ],
                ),
              ),
            ),
            if (_lastAttendanceTime != null)
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    children: [
                      const Text(
                        'Absensi Terakhir',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        DateFormat('EEEE, dd MMMM yyyy HH:mm', 'id_ID')
                            .format(_lastAttendanceTime!),
                      ),
                      Text(
                        'Tipe: ${_lastAttendanceType ?? '-'}',
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}

class MapPickerScreen extends StatefulWidget {
  final LatLng? initialPosition;

  const MapPickerScreen({Key? key, this.initialPosition}) : super(key: key);

  @override
  _MapPickerScreenState createState() => _MapPickerScreenState();
}

class _MapPickerScreenState extends State<MapPickerScreen> {
  late GoogleMapController _mapController;
  LatLng? _selectedLocation;
  Marker? _marker;

  @override
  void initState() {
    super.initState();
    _selectedLocation = widget.initialPosition;
    if (_selectedLocation != null) {
      _marker = Marker(
        markerId: const MarkerId('selected-location'),
        position: _selectedLocation!,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Pilih Lokasi'),
        actions: [
          IconButton(
            icon: const Icon(Icons.check),
            onPressed: () {
              if (_selectedLocation != null) {
                Navigator.pop(context, _selectedLocation);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                      content: Text('Silakan pilih lokasi terlebih dahulu')),
                );
              }
            },
          ),
        ],
      ),
      body: GoogleMap(
        initialCameraPosition: CameraPosition(
          target: widget.initialPosition ?? const LatLng(-6.2088, 106.8456),
          zoom: 14,
        ),
        onMapCreated: (controller) => _mapController = controller,
        onTap: (latLng) {
          setState(() {
            _selectedLocation = latLng;
            _marker = Marker(
              markerId: const MarkerId('selected-location'),
              position: latLng,
            );
          });
        },
        markers: _marker != null ? {_marker!} : {},
        myLocationEnabled: true,
        myLocationButtonEnabled: true,
      ),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.gps_fixed),
        onPressed: () {
          if (_selectedLocation != null) {
            _mapController.animateCamera(
              CameraUpdate.newLatLng(_selectedLocation!),
            );
          }
        },
      ),
    );
  }
}
